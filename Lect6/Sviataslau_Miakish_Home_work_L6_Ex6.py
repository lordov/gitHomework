import time
import datetime


def enter_task(list_to_do: list):
    '''Функция для добавления основных задач,
    состоящаяя из 3 циклов в которых мы спрашиваем у 
    пользователя: Номер задачи, Имя задачи, Приоритет здачи.
    В конце добовляем результат в список, который передаем функции.
    '''
    # Первый цикл, где спрашиваем у пользователя Номер задачи.
    while list_to_do != 0:
        number_task = int(input("Номер задачи:"))
        # Проверям соответствуют ли введение данные условиям.
        if number_task < 1 or number_task > 15:
            # Выводим результав в зависимости от введенных данных.
            print("Номер задачи от 1 до 15 включительно!")
        else:
            print("Номер задачи успешно добавлен")
            break

    # Второй цикл, где спршиваем у пользователя Имя задачи.
    while number_task >= 1 or number_task <= 15:
        task_name = (input("Имя задачи:"))
        # Проверям соответствуют ли введение данные условиям.
        if len(task_name) < 5:
            # Выводим результав в зависимости от введенных данных.
            print("Имя задачи должно быть более 5 символов!")
        else:
            print("Имя задачи успешно добавлено")
            break

    # Третий цикл, где спрашиваем у пользователя Приоритет задачи.
    while len(task_name) > 5:
        priority = int(input("Приоритет задачи:"))
        # Проверям соответствуют ли введение данные условиям.
        if priority < 1 or priority > 100:
            # Выводим результав в зависимости от введенных данных.
            print("Приоритет задачи от 1 до 100 включительно!")
        else:
            print("Приоритет задачи успешно добавлен")
            break
    # Фиксируем время, когда задача была записана.
    date_task = datetime.datetime.now()
            
    # Создаем визуальное отображение введенных данных и записываем данные в переменную.   
    result = (f" № | {str(number_task)} | {task_name} | {str(priority)} | \
                        {date_task.strftime('%d-%m-%Y %H:%M:%S')} | ")
    # Добавляем полученные данные в список.
    if list_to_do.append(result) is None:
        print("Задача добавилась успешно")

    


def disp_task(list_to_do):
    '''Функция для отображения всех добавленных задач в список.'''

    for task in list_to_do:
        print(task)


def cond_diplay():
    '''Функция для вывода визуального окна с условиями для пользователя.'''

    print('''
     ____________________________________________________________
    *                                                            *
    |   Номер задачи от 1 до 15 включительно                     |
    |   Имя задачи должно быть более 5 символов!                 |
    |   Приоритет задачи от 1 до 100 включительно!               |
    |   1 - ввод задачи, 2 - вывод всех задач. 3 - вывод условий.|
    |   0 - выход.                                               |
    |                                                            |
    *____________________________________________________________*
    ''')




def main():
    '''
    Основная функция. 
    Пользователь будет передавать значения
    для взаимодействия с программой. 
    '''
    # Выводим окно с условиями.
    cond_diplay()
    
    # Пустой список, в который будут добавляться все задачи пользователя.
    task_list = []   
   
    # Запускаем цикл взаимодействия пользователя с программой.
    cond_number = int(input("Выберите номер операции:"))

    while cond_number != 0:
        if cond_number == 1:
            try:
                enter_task(task_list)
            except:
                print("Что-то пошло не так.")
        elif cond_number == 2:
            disp_task(task_list)
        elif cond_number == 3:
            cond_diplay()          
        else:
            print("Не понимаю, выбери операцию")

        cond_number = int(input("Выберите номер операции:"))



if __name__ == "__main__":
    print("Я запущена сама по себе, как самостоятельный модуль(программа).")
     # Фиксируем начало работы с программой.
    starttime = datetime.datetime.now()
    # Запускаем программу
    main()
    # Фиксируем время выхода из программы.
    endtime = datetime.datetime.now()
    # Выводим пользователю количество потраченного времени в программе.
    print(f"Пока! Ты потратил {endtime - starttime} ")
    time.sleep(3)
else:
    print("Я запущена не сама по себе, как встроенный модуль (программа) в другю программую.")
            